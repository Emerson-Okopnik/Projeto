- name: Provisionar e configurar o Laravel
  hosts: backend
  become: yes

  vars:
    db_host: "clinica-postgres.c0vmw2ym8bt0.us-east-1.rds.amazonaws.com"
    db_port: 5432
    db_name: "laravel"
    db_user: "postgres"
    db_password: "postgres"
    url_back: "http://54.159.197.139"

  tasks:
    - name: Atualizar pacotes
      apt:
        update_cache: yes

    - name: Adicionar repositório do PHP 8.2
      apt_repository:
        repo: ppa:ondrej/php
        state: present
        update_cache: yes

    - name: Instalar PHP 8.2, Nginx e dependências do Laravel
      apt:
        name:
          - php8.2
          - php8.2-cli
          - php8.2-common
          - php8.2-mbstring
          - php8.2-xml
          - php8.2-bcmath
          - php8.2-curl
          - php8.2-pgsql
          - php8.2-fpm
          - unzip
          - curl
          - git
          - nginx
        state: present

    - name: Verificar versão do PHP
      command: php -v
      register: php_version
      ignore_errors: yes

    - name: Clonar repositório do GitHub
      git:
        repo: 'https://github.com/Emerson-Okopnik/Projeto.git'
        dest: /var/www/backend
        version: main
        force: yes

    - name: Marcar diretório Git como seguro
      command: git config --global --add safe.directory /var/www/backend
      become_user: ubuntu

    - name: Garantir que o diretório do projeto é de propriedade do usuário ubuntu
      file:
        path: /var/www/backend/back-end
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: Instalar Composer
      shell: |
        curl -sS https://getcomposer.org/installer | php
        mv composer.phar /usr/local/bin/composer
      args:
        creates: /usr/local/bin/composer

    - name: Instalar dependências do Laravel com Composer
      composer:
        working_dir: /var/www/backend/back-end
        no_dev: yes
      become: true
      become_user: ubuntu

    - name: Criar arquivo .env com configuração do PostgreSQL RDS
      copy:
        dest: /var/www/backend/back-end/.env
        content: |
          APP_NAME=Laravel
          APP_ENV=production
          APP_KEY=
          APP_DEBUG=false
          APP_URL={{ url_back }}

          LOG_CHANNEL=stack
          LOG_LEVEL=debug

          DB_CONNECTION=pgsql
          DB_HOST={{ db_host }}
          DB_PORT={{ db_port }}
          DB_DATABASE={{ db_name }}
          DB_USERNAME={{ db_user }}
          DB_PASSWORD={{ db_password }}

          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DRIVER=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120

    - name: Garantir permissões corretas no projeto
      file:
        path: /var/www/backend/back-end
        recurse: yes
        owner: www-data
        group: www-data
        state: directory

    - name: Garantir permissões em bootstrap/cache
      file:
        path: /var/www/backend/back-end/bootstrap/cache
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: '0775'

    - name: Limpar cache de configuração do Laravel
      command: php artisan config:clear
      args:
        chdir: /var/www/backend/back-end

    - name: Gerar chave da aplicação
      command: php artisan key:generate
      args:
        chdir: /var/www/backend/back-end
    
    - name: Criar vendor/ se não existir
      file:
        path: /var/www/backend/back-end/vendor
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0775'

    - name: Garantir permissões para vendor/
      file:
        path: /var/www/backend/back-end/vendor
        recurse: yes
        owner: ubuntu
        group: ubuntu
        mode: '0775'
    
    - name: Garantir que composer.json e composer.lock sejam editáveis
      file:
        path: "{{ item }}"
        owner: ubuntu
        group: ubuntu
        mode: '0664'
      loop:
        - /var/www/backend/back-end/composer.json
        - /var/www/backend/back-end/composer.lock
   
    - name: Garantir permissões totais para o Laravel funcionar corretamente
      file:
        path: /var/www/backend/back-end
        recurse: yes
        owner: ubuntu
        group: www-data
        mode: '0775'

    - name: Instalar o pacote JWT Auth
      command: composer require tymon/jwt-auth --no-interaction
      args:
        chdir: /var/www/backend/back-end
      become: true
      become_user: ubuntu

    - name: Publicar o config do JWT Auth
      command: php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
      args:
        chdir: /var/www/backend/back-end
      become: true
      become_user: ubuntu

    - name: Gerar JWT_SECRET
      command: sudo php artisan jwt:secret
      args:
        chdir: /var/www/backend/back-end
      become: true
      become_user: ubuntu

    - name: Limpar cache de configuração
      command: php artisan config:clear
      args:
        chdir: /var/www/backend/back-end

    - name: Atualizar cache de configuração
      command: php artisan config:cache
      args:
        chdir: /var/www/backend/back-end

    - name: Rodar migrations
      command: php artisan migrate --force
      args:
        chdir: /var/www/backend/back-end

    - name: Configurar permissões de storage
      file:
        path: /var/www/backend/back-end/storage
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: '0775'

    - name: Configurar Nginx para o Laravel
      copy:
        dest: /etc/nginx/sites-available/laravel
        content: |
          server {
              listen 80;
              server_name _;

              root /var/www/backend/back-end/public;

              index index.php index.html;

              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                  include fastcgi_params;
              }

              location ~ /\.ht {
                  deny all;
              }
          }
      notify: Restart Nginx

    - name: Habilitar site do Laravel
      file:
        src: /etc/nginx/sites-available/laravel
        dest: /etc/nginx/sites-enabled/laravel
        state: link
        force: yes

    - name: Remover configuração padrão do Nginx
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted


- name: Provisionar e configurar o Front-end Vue.js
  hosts: frontend
  become: yes

  vars:
    vue_repo: 'https://github.com/Emerson-Okopnik/Projeto.git'
    vue_branch: 'main'
    vue_app_dir: '/var/www/frontend'
    vue_source_subdir: 'front-end'
    vue_dist_dir: 'dist'
    vue_build_dir: "{{ vue_app_dir }}/{{ vue_source_subdir }}/{{ vue_dist_dir }}"
    url_back: "http://54.159.197.139/api"

  tasks:
    - name: Atualizar pacotes
      apt:
        update_cache: yes

    - name: Instalar pacotes base necessários
      apt:
        name:
          - curl
          - git
          - nginx
          - build-essential
        state: present

    - name: Remover Node.js e npm instalados via APT (caso existam)
      apt:
        name:
          - nodejs
          - npm
        state: absent
      ignore_errors: yes

    - name: Instalar Node.js via NVM (v18 LTS)
      shell: |
        export NVM_DIR=/home/ubuntu/.nvm
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        source $NVM_DIR/nvm.sh
        nvm install 18
        nvm use 18
        nvm alias default 18
      args:
        executable: /bin/bash
      become_user: ubuntu
      environment:
        HOME: /home/ubuntu
    
    - name: Remover diretório existente do Vue.js (para garantir clone limpo)
      file:
        path: "{{ vue_app_dir }}"
        state: absent

    - name: Clonar repositório do Vue.js
      git:
        repo: "{{ vue_repo }}"
        dest: "{{ vue_app_dir }}"
        version: "{{ vue_branch }}"
        force: yes

    - name: Garantir que o diretório do projeto Vue.js é de propriedade do ubuntu
      file:
        path: "{{ vue_app_dir }}"
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: Instalar dependências do Vue.js
      shell: |
        export NVM_DIR=/home/ubuntu/.nvm
        source $NVM_DIR/nvm.sh
        nvm use 18
        npm install
      args:
        chdir: "{{ vue_app_dir }}/{{ vue_source_subdir }}"
        executable: /bin/bash
      become_user: ubuntu

    - name: Criar arquivo .env apontando para a API (backend público)
      copy:
        dest: "{{ vue_app_dir }}/{{ vue_source_subdir }}/.env"
        content: |
          VITE_API_BASE_URL={{url_back}}
      become_user: ubuntu

    - name: Forçar remoção do diretório dist antigo (caso exista)
      shell: rm -rf dist
      args:
        chdir: "{{ vue_app_dir }}/{{ vue_source_subdir }}"
        executable: /bin/bash
      become_user: ubuntu

    - name: Compilar o projeto Vue.js
      shell: |
        export NVM_DIR=/home/ubuntu/.nvm
        source $NVM_DIR/nvm.sh
        nvm use 18
        npm run build
      args:
        chdir: "{{ vue_app_dir }}/{{ vue_source_subdir }}"
        executable: /bin/bash
      become_user: ubuntu

    - name: Verificar se build foi gerado corretamente
      stat:
        path: "{{ vue_build_dir }}/index.html"
      register: build_result

    - name: Falhar caso o build do Vue.js não tenha sido criado
      fail:
        msg: "Build não encontrado em {{ vue_build_dir }}"
      when: not build_result.stat.exists

    - name: Remover conteúdo antigo da pasta pública
      file:
        path: /var/www/html/
        state: absent

    - name: Criar novamente a pasta pública do Nginx
      file:
        path: /var/www/html/
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Copiar arquivos do build para o Nginx
      copy:
        src: "{{ vue_build_dir }}/"
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: '0755'
        remote_src: yes

    - name: Configurar Nginx para o Vue.js
      copy:
        dest: /etc/nginx/sites-available/vue
        content: |
          server {
              listen 80;
              server_name _;

              root /var/www/html;
              index index.html index.htm;

              location / {
                  try_files $uri $uri/ /index.html;
              }
          }
      notify: Restart Nginx Front

    - name: Habilitar site do Vue.js
      file:
        src: /etc/nginx/sites-available/vue
        dest: /etc/nginx/sites-enabled/vue
        state: link
        force: yes

    - name: Remover configuração padrão do Nginx
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

  handlers:
    - name: Restart Nginx Front
      service:
        name: nginx
        state: restarted
